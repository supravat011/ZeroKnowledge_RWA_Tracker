
TARGETS
Week - 1
{
1)NFT contract with like mint,metadata and transfer etc functions
NFT contract future functions idea ->
{
  fractionalizeAsset: This allows an asset to be fractionalized among multiple shareholders.
  Asset Locking: This allows locking assets to prevent transfers for a period of time.
  Asset History: This keeps track of all transfers for each asset.
  Asset Valuation Update: This allows updating the value of an asset over time.
  Asset Details: This allows you to store and retrieve additional details about each tokenized asset.
}
2)unit test for the NFT contract
3)a function to send somekind of like data to verifier
4)a contract to store the the proof from nft
5)adding functionality to this contract like

ZKP idea -> {
  1)IPFS Data Structure:
Let's assume the IPFS hash (e.g., newhash123) points to a JSON file with this structure:
{
  "ownerAddress": "0x1234...",
  "tokenId": "123",
  "carNumber": "TN01EB2005",
  "otherDetails": "..."
}

 2)Backend Script:
 -> Take input: buyer's address, tokenId, and search item (car number)
  ->Query the IPFS hash for the given address and tokenId
    ->Retrieve the data from IPFS
      ->Call the Zokrates prover function with the necessary data

}
 3)Prover Workflow:
Your backend calls the Zokrates prover with:

-> Private inputs: ownerAddress, tokenId, carNumber (from buyer), and the data from IPFS
-> Public input: IPFS hash
 --->Zokrates generates a proof

 4)Verification Process:
-> The buyer receives the proof from your backend
-> They call the verifier contract with the proof and the public input (IPFS hash)
-> The verifier contract returns true if the proof is valid, false otherwise
}